// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 54HMz7Hvd2hKuAsezVhBVr
// Component: evFdljHsKY7L5
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 2absIEKb81Nff/component

import { useScreenVariants as useScreenVariantsdYbhPAqG0G9Hu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: dYbhPAqG0g9Hu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_web_3_auth_test.module.css"; // plasmic-import: 54HMz7Hvd2hKuAsezVhBVr/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: evFdljHsKY7L5/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: x5R3V1qKIDRpC/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: jOZ57IuiaExMg/icon
import anonProfilePicjpegQsrMwUygz from "./images/anonProfilePicjpeg.jpeg"; // plasmic-import: qsrMWUygz/picture

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  connect2?: p.Flex<typeof Button>;
  pfp?: p.Flex<typeof p.PlasmicImg>;
  connect?: p.Flex<typeof Button>;
  title?: p.Flex<"h2">;
  sandbox?: p.Flex<"div">;
  send?: p.Flex<typeof Button>;
  latestTx?: p.Flex<"div">;
};

export interface DefaultHomepageProps {
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdYbhPAqG0G9Hu()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <Button
              data-plasmic-name={"connect2"}
              data-plasmic-override={overrides.connect2}
              className={classNames("__wab_instance", sty.connect2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dUWfL
                )}
              >
                {"Connect"}
              </div>
            </Button>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__bGfGl)}>
              <p.PlasmicImg
                data-plasmic-name={"pfp"}
                data-plasmic-override={overrides.pfp}
                alt={""}
                className={classNames(sty.pfp)}
                displayHeight={"40px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"40px" as const}
                loading={"lazy" as const}
                src={{
                  src: anonProfilePicjpegQsrMwUygz,
                  fullWidth: 612,
                  fullHeight: 612,
                  aspectRatio: undefined
                }}
              />

              <Button
                data-plasmic-name={"connect"}
                data-plasmic-override={overrides.connect}
                className={classNames("__wab_instance", sty.connect)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kYq4G
                  )}
                >
                  {"Login"}
                </div>
              </Button>
            </div>
          ) : null}

          <h2
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.title
            )}
          >
            {"Web3Auth Test"}
          </h2>

          {true ? (
            <div
              data-plasmic-name={"sandbox"}
              data-plasmic-override={overrides.sandbox}
              className={classNames(projectcss.all, sty.sandbox)}
            />
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__pcSnl)}
          >
            <Button
              data-plasmic-name={"send"}
              data-plasmic-override={overrides.send}
              className={classNames("__wab_instance", sty.send)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ejgn
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Mint"
                  : "Mint"}
              </div>
            </Button>
          </p.Stack>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__biUuy
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#FFFFFF" }}
              >
                {"You will receive a handful of ETH, and then mint 1 NFT."}
              </span>
            </React.Fragment>
          </div>

          <div
            data-plasmic-name={"latestTx"}
            data-plasmic-override={overrides.latestTx}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.latestTx
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly") ? (
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#FFFFFF" }}
                >
                  {"View your latest transaction"}
                </span>
              </React.Fragment>
            ) : (
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#FFFFFF" }}
                >
                  {"View your latest transaction"}
                </span>
              </React.Fragment>
            )}
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "connect2",
    "pfp",
    "connect",
    "title",
    "sandbox",
    "send",
    "latestTx"
  ],
  connect2: ["connect2"],
  pfp: ["pfp"],
  connect: ["connect"],
  title: ["title"],
  sandbox: ["sandbox"],
  send: ["send"],
  latestTx: ["latestTx"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  connect2: typeof Button;
  pfp: typeof p.PlasmicImg;
  connect: typeof Button;
  title: "h2";
  sandbox: "div";
  send: typeof Button;
  latestTx: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    connect2: makeNodeComponent("connect2"),
    pfp: makeNodeComponent("pfp"),
    connect: makeNodeComponent("connect"),
    title: makeNodeComponent("title"),
    sandbox: makeNodeComponent("sandbox"),
    send: makeNodeComponent("send"),
    latestTx: makeNodeComponent("latestTx"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
