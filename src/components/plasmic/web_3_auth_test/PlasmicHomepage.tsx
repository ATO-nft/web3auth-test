// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 54HMz7Hvd2hKuAsezVhBVr
// Component: evFdljHsKY7L5
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LoginButton from "../../LoginButton"; // plasmic-import: gSxAtSkc_B2bx/component
import Button from "../../Button"; // plasmic-import: 2absIEKb81Nff/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_web_3_auth_test.module.css"; // plasmic-import: 54HMz7Hvd2hKuAsezVhBVr/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: evFdljHsKY7L5/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: x5R3V1qKIDRpC/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: jOZ57IuiaExMg/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  login?: p.Flex<typeof LoginButton>;
  h2?: p.Flex<"h2">;
  sandbox?: p.Flex<"div">;
  network?: p.Flex<"div">;
  address?: p.Flex<"div">;
  balance?: p.Flex<"div">;
  action?: p.Flex<typeof Button>;
  text?: p.Flex<"div">;
};

export interface DefaultHomepageProps {
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <LoginButton
            data-plasmic-name={"login"}
            data-plasmic-override={overrides.login}
            className={classNames("__wab_instance", sty.login)}
          />

          <h2
            data-plasmic-name={"h2"}
            data-plasmic-override={overrides.h2}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2
            )}
          >
            {"Web3Auth test ðŸŒˆ"}
          </h2>

          {true ? (
            <div
              data-plasmic-name={"sandbox"}
              data-plasmic-override={overrides.sandbox}
              className={classNames(projectcss.all, sty.sandbox)}
            >
              <div
                data-plasmic-name={"network"}
                data-plasmic-override={overrides.network}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.network
                )}
              >
                {"Network"}
              </div>

              <div
                data-plasmic-name={"address"}
                data-plasmic-override={overrides.address}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.address
                )}
              >
                {"Address"}
              </div>

              <div
                data-plasmic-name={"balance"}
                data-plasmic-override={overrides.balance}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.balance
                )}
              >
                {"Balance"}
              </div>
            </div>
          ) : null}

          <Button
            data-plasmic-name={"action"}
            data-plasmic-override={overrides.action}
            className={classNames("__wab_instance", sty.action)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Click me"}
            </div>
          </Button>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "login",
    "h2",
    "sandbox",
    "network",
    "address",
    "balance",
    "action",
    "text"
  ],
  login: ["login"],
  h2: ["h2"],
  sandbox: ["sandbox", "network", "address", "balance"],
  network: ["network"],
  address: ["address"],
  balance: ["balance"],
  action: ["action", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  login: typeof LoginButton;
  h2: "h2";
  sandbox: "div";
  network: "div";
  address: "div";
  balance: "div";
  action: typeof Button;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    login: makeNodeComponent("login"),
    h2: makeNodeComponent("h2"),
    sandbox: makeNodeComponent("sandbox"),
    network: makeNodeComponent("network"),
    address: makeNodeComponent("address"),
    balance: makeNodeComponent("balance"),
    action: makeNodeComponent("action"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
